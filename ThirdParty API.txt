Integrate a 3rd party API in AEM 

Integrating a third-party API in Adobe Experience Manager (AEM) allows you to extend the functionality
 of your AEM application, enabling it to interact with external services.
 Hereâ€™s a step-by-step example using a hypothetical weather API to display weather
 information on a banking website. 

#### Example Scenario 

**Objective**:  

Integrate a weather API to show the current weather conditions on the bank's homepage. 

### Steps for Integration 

#### 1. **Choose a Third-Party API**: For this example, we will use a public weather API,
 such as OpenWeatherMap, which provides weather data based on location. 

#### 2. **Create a Service in AEM**: 
You can create an AEM service that will handle API calls. This can be done using a Sling Model or
 a Servlet. 

**Create a Sling Model**: 

@Model(adaptables = Resource.class) 
public class WeatherService { 
    private static final String API_KEY = "your_api_key"; 
    private static final String API_URL = "http://api.openweathermap.org/data/2.5/weather"; 
    @ValueMapValue 
    private String location; 
    public String getWeatherData() { 
        StringBuilder result = new StringBuilder(); 
        try { 
            URL url = new URL(API_URL + "?q=" + location + "&appid=" + API_KEY); 
            HttpURLConnection conn = (HttpURLConnection) url.openConnection(); 
            conn.setRequestMethod("GET"); 
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream())); 
            String line; 
            while ((line = rd.readLine()) != null) { 
                result.append(line);l 
            } 
            rd.close(); 
        } catch (IOException e) { 
            e.printStackTrace(); 
        } 
        return result.toString(); 
    } 
} 

#### 3. **Expose the Service via a Servlet (Optional)**: If you want to expose this functionality via a servlet: 

package com.example.aem.servlets; 

 
import org.apache.sling.api.SlingHttpServletRequest; 
import org.apache.sling.api.SlingHttpServletResponse; 
import org.apache.sling.api.servlets.SlingAllMethodsServlet; 
import org.osgi.service.component.annotations.Component; 
import org.osgi.service.component.annotations.Reference; 
import java.io.IOException; 
 
@Component(service = {javax.servlet.Servlet.class}, 
        property = { 
                "sling.servlet.paths=/bin/weather", 
                "sling.servlet.methods=GET" 
        }) 
public class WeatherServlet extends SlingAllMethodsServlet { 
    @Reference 
    private WeatherService weatherService; 

 
    @Override 
    protected void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response) throws IOException { 
        String weatherData = weatherService.getWeatherData(); 
        response.setContentType("application/json"); 
        response.getWriter().write(weatherData); 
    } 
} 

#### 4. **Use the Weather Data in a Component** 

Create an AEM component that utilizes the weather service to display the data. 

**Example HTL File (`weatherComponent.html`)**: 

<div> 
    <h2>Current Weather</h2> 
    <p>${weatherService.weatherData}</p> 
</div> 

**Example Sling Model for Component**: 

@Model(adaptables = Resource.class) 
public class WeatherComponent { 
    @Inject 
    private WeatherService weatherService; 
    public String getWeatherData() { 
        return weatherService.getWeatherData(); 
    } 
} 

#### 5. **Configure the Component in AEM** 

- Create a new component in AEM under `/apps/your-project/components/weather`. 

- Add the HTL and Java files created above. 

- Configure the component in the AEM editor and add it to the desired page. 

#### 6. **Test the Integration** 

- Deploy the code to your AEM instance. 

- Navigate to the page where the weather component is placed. 

- Ensure that the weather data is displayed correctly. 

### Conclusion 

Integrating a third-party API in AEM involves creating a service to handle API calls, optionally exposing it via a servlet, and then using that data in your AEM components. This approach allows you to enrich your AEM application with external data, enhancing user experience and functionality. 