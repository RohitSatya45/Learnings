chapter1.
1. Variable declaration
var a="rohit" //after es5 we got const & let.

2.primitive datatypes :number,string,boolean,undefined,null
var data=1; we can find it data type using console.log(typeof data).
Note: for undefined we dont store any value.
2.1non primitive :array object function


3.Arrays
const data=[1,2,3,4,5];
console.log(data);

4.Objects.
const data={
name:"rohit",
age:28
}
console.log(data.age).//we cannot print whole object

5.functions.
 base structure function name(){
}
5.1 function name(num1) {
  console.log(num1);
}
name(10);

6.conditional statements.
6.1 if else
let num = 10;

if (num > 10) {
    console.log("Number is greater than 10");
} else if (num < 10) {
    console.log("Number is less than 10");
} else {
    console.log("Number is exactly 10");
}

7.loops 
for and while

chapter 2.ES5 Feature
1.Array Features.
var data=[1,2,3,4];
1.1 Array.isArray()//return true or false.
1.2 data.map()// it takes function as an argument and return new array by modifying existing array
Eample 1: usinng anonymus function
var data=[1,2,3,4];
data.map(
  function(element){
    console.log(element);
  }
)

var data=[1,2,3,4];
var updated =data.map(
  function(element){
    return element+1;
  }
)
console.log(updated);

Example 2.using Arrow Function:
console.log(data.map(element=>element*2));

1.3 filter
same as map but filter returns values based on condition.
var data=[1,2,3,4];
var updated =data.filter(
  function(element){
    return element>1;
  }
)
console.log(updated);

1.4 forEach it is used to ittearet over an array and it wont return any new array as output.it is used just for iteration.
Example: var data = [1, 2, 3, 4];
var updated = data.forEach(function (element) {
  console.log(element);
});

1.5
every //it returns true or false every return true only if all elemets are greatere than 0.
var data = [1, 2, 3, 4];
var updated = data.every(function (element) {
  return element > 0;
});
console.log(updated);

1.6
some //it returns true or false every return true if any one value greater than 0.
var data = [1, 2, 3, 4];
var updated = data.every(function (element) {
  return element > 0;
});
console.log(updated);

1.7 indexOf
data.indexOf(4);//output=3.

1.8 lastIndexOf it is used when 4 has multiple instances.


2.JSON Features
2.1 stringify().=> it is used convert js object to json.

3.Date features.
var date = new Date();
console.log(date);
console.log(date.valueOf());//it prints date in milliseconds.


3.ES6 Features.
3.1 let & const.//have block scope
but var has universal scope.
for const we cannot reassign the value also.

3.2 Arrow functions
const a= ()=>{} to call  we call as a()

3.3 Classes and calling using object.
class User {
  admin() {
    console.log('this is admin method');
  }
}
let obj = new User();
obj.admin();

3.3.2 for constructor.
class User {
  constructor(msg) {
    this.msg = msg; //this is used to refer to current object if new object is cresated then value changes based on what we give
  }
  admin() {
    console.log('this is admin method');
    console.log(this.msg);
  }
}
let obj = new User('hi');
obj.admin();

3.4 for of
Example: var data = [1, 2, 3, 4];
for(const a of data){
  console.log(a);
}

3.5 Default parameters
function a(name,age=25){ //here if we don pass value then default will be 25
}

3.6 rest operator.(it should used at last).(...rest operator). if we are not sure what values we pass to function we 
use rest operator.

3.7 spread operator 
if we want to transfer one values to other array.
Example:
let a = [1, 2, 3, 4];
let b = [5, 6, 7, 8];
let c=[...a,...b];
console.log(c);

3.7.2 as both key value are same use like this.
const dam={
  name:"rohit",
  age:25,
  sex:"M"
}
const damed={
  name:"satya",
  age:26,
  sex:"M"
}
const news = {first:{...dam},second:{...damed}};
console.log(news);

3.8 Destructuring 
3.8.1 descrturing of array
let a = [1, 2, 3, 4];
let[b,c,d]=a;
console.log(b);

3.8.2 destructuring of object.
const dam={
  name:"rohit",
  age:25,
  sex:"M"
}
const {name,age,sex}=dam;
console.log(name);





















	
